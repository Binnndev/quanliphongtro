import React from 'react'; // B·ªè useState n·∫øu kh√¥ng d√πng state n·ªôi b·ªô ·ªü ƒë√¢y
import { useNavigate } from "react-router-dom";
import Button from './Button';
import axios from 'axios'; // Th√™m axios n·∫øu c·∫ßn g·ªçi API
// import { FaEdit, FaTrashAlt } from 'react-icons/fa'; // B·ªè comment n·∫øu d√πng react-icons

// --- Component hi·ªÉn th·ªã n·ªôi dung cho Tab Th√†nh vi√™n ---
const MembersTabContent = ({ members, onAddMemberClick, onEditMemberClick, onDeleteMember  }) => {
    const navigate = useNavigate(); // V·∫´n gi·ªØ n·∫øu c·∫ßn cho vi·ªác kh√°c

    // G·ªçi prop function thay v√¨ x·ª≠ l√Ω tr·ª±c ti·∫øp
    const handleAddMember = () => {
        console.log("MembersTabContent: N√∫t Th√™m ƒë∆∞·ª£c nh·∫•n."); // Ki·ªÉm tra 1: N√∫t c√≥ ho·∫°t ƒë·ªông kh√¥ng?
        if (onAddMemberClick) {
            console.log("MembersTabContent: G·ªçi h√†m onAddMemberClick t·ª´ props..."); // Ki·ªÉm tra 2: C√≥ g·ªçi prop kh√¥ng?
            onAddMemberClick(); // G·ªçi h√†m ƒë∆∞·ª£c truy·ªÅn t·ª´ RenterPage
        } else {
            console.error("MembersTabContent: Prop onAddMemberClick kh√¥ng t·ªìn t·∫°i!"); // L·ªói n·∫øu prop ch∆∞a ƒë∆∞·ª£c truy·ªÅn xu·ªëng
        }
    };

    // G·ªçi prop function v√† truy·ªÅn d·ªØ li·ªáu th√†nh vi√™n c·∫ßn s·ª≠a
    const handleEditMember = (member) => { // Truy·ªÅn c·∫£ object member
        if (onEditMemberClick) {
            onEditMemberClick(member);
        } else {
             console.warn("onEditMemberClick prop is missing!");
        }
    };

    const handleDeleteMember = (member) => {
        // S·ª≠ d·ª•ng ID nh·∫•t qu√°n (MaKhachThue ho·∫∑c id)
        const memberId = member.MaKhachThue || member.id;
        if (!memberId) {
             console.error("L·ªói: Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ID th√†nh vi√™n ƒë·ªÉ x√≥a.");
             return;
        }

        // Thay ƒë·ªïi th√¥ng b√°o x√°c nh·∫≠n cho ph√π h·ª£p v·ªõi soft delete
        if (window.confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën c·∫≠p nh·∫≠t tr·∫°ng th√°i r·ªùi ƒëi cho th√†nh vi√™n ID: ${memberId}?`)) {
            console.log("MembersTabContent: Y√™u c·∫ßu x√≥a (c·∫≠p nh·∫≠t tr·∫°ng th√°i) th√†nh vi√™n ID:", memberId);
            // G·ªçi h√†m prop t·ª´ RenterPage thay v√¨ g·ªçi API tr·ª±c ti·∫øp
            if (onDeleteMember) {
                onDeleteMember(memberId); // Truy·ªÅn ID l√™n cho component cha x·ª≠ l√Ω
            } else {
                console.error("MembersTabContent: Prop onDeleteMember kh√¥ng t·ªìn t·∫°i!");
            }
        }
    };

    const displayMembers = members && members.length > 0 ? members : [];
    // --- K·∫øt th√∫c d·ªØ li·ªáu m·∫´u ---

    // --- Styles ---
    const thStyle = { padding: '12px 15px', textAlign: 'center', fontWeight: '600', fontSize: '0.9rem', whiteSpace: 'nowrap' };
    const tdLeftStyle = { padding: '10px 15px', textAlign: 'left', fontSize: '0.9rem', verticalAlign: 'middle', borderBottom: '1px solid #eee' };
    const tdCenterStyle = { ...tdLeftStyle, textAlign: 'center' };
    const actionButtonStyle = { background: 'none', border: 'none', cursor: 'pointer', padding: '5px', margin: '0 3px', fontSize: '1rem' };
    const tableContainerStyle = { width: '100%', overflowX: 'auto' };

    const formatDateForInput = (dateString) => {
        if (!dateString) return '';
        try {
            const date = new Date(dateString);
            if (isNaN(date.getTime())) return '';
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const year = date.getFullYear();
            return `${day}-${month}-${year}`;
        } catch (e) {
            console.error("L·ªói ƒë·ªãnh d·∫°ng ng√†y:", dateString, e);
            return '';
        }
    };


    return (
        <div style={{ padding: '20px' }}>
            {/* N√∫t Th√™m */}
            <div style={{ textAlign: 'right', marginBottom: '15px' }}>
                 {/* S·ª≠ d·ª•ng Button component ho·∫∑c button th∆∞·ªùng */}
                 {/* <Button label='Th√™m' class_name='green-btn btn' onClick={handleAddMember} /> */}
                 <button className='green-btn btn' onClick={handleAddMember} >Th√™m</button>
            </div>

            {/* B·∫£ng d·ªØ li·ªáu */}
            <div style={tableContainerStyle}>
                <table style={{ width: '100%', borderCollapse: 'collapse', background: 'white', boxShadow: '0 1px 3px rgba(0,0,0,0.1)', minWidth: '800px' }}>
                    <thead>
                        <tr style={{ background: '#f8f9fa', borderBottom: '2px solid #dee2e6' }}>
                            <th style={thStyle}>H·ªç v√† t√™n</th>
                            <th style={thStyle}>CCCD</th>
                            <th style={thStyle}>S·ªë ƒëi·ªán tho·∫°i</th>
                            <th style={thStyle}>Email</th>
                            <th style={thStyle}>Ng√†y sinh</th>
                            <th style={thStyle}>Gi·ªõi t√≠nh</th>
                            <th style={thStyle}>Ghi ch√∫</th>
                            {/* <th style={thStyle}>·∫¢nh gi·∫•y t·ªù</th> */}
                            <th style={thStyle}>H√†nh ƒë·ªông</th>
                        </tr>
                    </thead>
                    <tbody>
                        {displayMembers.length > 0 ? (
                            displayMembers.map((member, index) => (
                                <tr key={member.id || index} >
                                    <td style={tdCenterStyle}>{member.HoTen}</td>
                                    <td style={tdCenterStyle}>{member.CCCD}</td>
                                    <td style={tdCenterStyle}>{member.SoDienThoai}</td>
                                    <td style={tdCenterStyle}>{member.Email}</td>
                                    <td style={tdCenterStyle}>{formatDateForInput(member.NgaySinh)}</td>
                                    <td style={tdCenterStyle}>{member.GioiTinh}</td>
                                    <td style={{...tdCenterStyle, maxWidth: '150px', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap'}} title={member.GhiChu}>{member.GhiChu}</td>
                                    {/* <td style={tdCenterStyle}>{member.AnhGiayTo}</td> */}
                                    <td style={{...tdCenterStyle, whiteSpace: 'nowrap'}}>
                                        <button onClick={() => handleEditMember(member)} style={actionButtonStyle} title="S·ª≠a">‚úèÔ∏è</button>
                                        <button onClick={() => handleDeleteMember(member)} style={{ ...actionButtonStyle, color: 'red' }} title="X√≥a">üóëÔ∏è</button>
                                    </td>
                                </tr>
                            ))
                        ) : (
                            <tr>
                                <td colSpan="9" style={{ padding: '20px', textAlign: 'center', fontStyle: 'italic', color: '#666' }}>
                                    Ch∆∞a c√≥ th√†nh vi√™n n√†o.
                                </td>
                            </tr>
                        )}
                    </tbody>
                </table>
            </div>
        </div>
    );
};

export default MembersTabContent;