const { Tenant, Room, RentalHouse, Landlord, TaiKhoan, sequelize } = require('../models'); // Import ƒë·ªß models
const fs = require('fs');
const path = require('path'); // Gi·ªØ l·∫°i path n·∫øu c·∫ßn d√πng ·ªü ch·ªó kh√°c

// üü¢ L·∫•y danh s√°ch kh√°ch thu√™
exports.getAllTenants = async (req, res) => {
    try {
        const tenants = await Tenant.findAll();
        res.json(tenants);
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y danh s√°ch kh√°ch:", error);
        res.status(500).json({ message: error.message });
    }
};

// üü¢ L·∫•y th√¥ng tin kh√°ch theo ID
exports.getTenantById = async (req, res) => {
    try {
        const tenant = await Tenant.findByPk(req.params.id);
        if (!tenant) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng" });
        }
        res.json(tenant);
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin kh√°ch:", error);
        res.status(500).json({ message: error.message });
    }
};

// üü¢ L·∫•y th√¥ng tin kh√°ch theo ph√≤ng
exports.getTenantByRoom = async (req, res) => {
    try {
        const tenants = await Tenant.findAll({
            where: { MaPhong: req.params.roomId }
        });
        res.json(tenants);
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin kh√°ch:", error);
        res.status(500).json({ message: error.message });
    }
}

// üü¢ L·∫•y th√¥ng tin kh√°ch theo gi·ªõi t√≠nh
exports.getTenantByGender = async (req, res) => {
    try {
        const tenants = await Tenant.findAll({
            where: { GioiTinh: req.params.sex }
        });
        res.json(tenants);
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin kh√°ch:", error);
        res.status(500).json({ message: error.message });
    }
};

// üü¢ L·∫•y th√¥ng tin ƒë·∫°i di·ªán theo ph√≤ng
exports.getRepresentativeByRoom = async (req, res) => {
    try {
        const tenant = await Tenant.findOne({
            where: { MaPhong: req.params.roomId, LaNguoiDaiDien: true, TrangThai: "ƒêang thu√™" }
        });

        if (!tenant) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë·∫°i di·ªán ph√≤ng" });
        }

        res.json(tenant);
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin ƒë·∫°i di·ªán:", error);
        res.status(500).json({ message: error.message });
    }
};

// Controller: L·∫•y MaTK ch·ªß tr·ªç cho kh√°ch thu√™ - C√ì DEBUG LOGS
exports.getLandlordAccountForTenant = async (req, res) => {
    const tenantUserId = req.params.tenantUserId; // MaTK c·ªßa kh√°ch thu√™

    // Log 1: B·∫Øt ƒë·∫ßu x·ª≠ l√Ω request
    console.log(`[DEBUG] === B·∫Øt ƒë·∫ßu getLandlordAccountForTenant cho Kh√°ch Thu√™ MaTK: ${tenantUserId} ===`);

    if (!tenantUserId) {
        // Log 2: Thi·∫øu ID ƒë·∫ßu v√†o
        console.log("[DEBUG] L·ªói: Thi·∫øu tenantUserId trong params.");
        return res.status(400).json({ message: "Thi·∫øu ID kh√°ch thu√™." });
    }

    try {
        console.log(`[DEBUG] ƒêang th·ª±c hi·ªán Tenant.findOne v·ªõi MaTK: ${tenantUserId}`);
        const tenant = await Tenant.findOne({
            where: { MaTK: tenantUserId },
            include: [{ // Level 1: Tenant -> Room
                model: Room,
                as: 'Room',
                required: true, // Gi·ªØ required: true ƒë·ªÉ d·ªÖ debug l·ªói thi·∫øu li√™n k·∫øt
                attributes: ['MaPhong', 'MaNhaTro'], // L·∫•y c√°c kh√≥a c·∫ßn thi·∫øt
                include: [{ // Level 2: Room -> House
                    model: RentalHouse,
                    // as: 'House',
                    required: true,
                    attributes: ['MaNhaTro', 'MaChuTro'], // L·∫•y c√°c kh√≥a c·∫ßn thi·∫øt
                    include: [{ // Level 3: House -> Landlord
                        model: Landlord,
                        as: 'Landlord',
                        required: true,
                        attributes: ['MaChuTro', 'MaTK', 'HoTen'], // L·∫•y c√°c kh√≥a c·∫ßn thi·∫øt
                        include: [{ // Level 4: Landlord -> User
                            model: TaiKhoan,
                            as: 'Account',
                            required: true,
                            attributes: ['MaTK', 'TenDangNhap'] // L·∫•y th√¥ng tin User ch·ªß tr·ªç
                        }]
                    }]
                }]
            }],
            attributes: ['MaKhachThue', 'MaTK', 'MaPhong'], // L·∫•y c√°c tr∆∞·ªùng c·∫ßn c·ªßa Tenant ƒë·ªÉ ki·ªÉm tra
            // logging: console.log // B·ªè comment d√≤ng n√†y n·∫øu mu·ªën xem c√¢u l·ªánh SQL ƒë∆∞·ª£c Sequelize t·∫°o ra
        });

        // Log 3: K·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ Sequelize
        // D√πng JSON.stringify ƒë·ªÉ xem c·∫•u tr√∫c r√µ r√†ng, null, 2 ƒë·ªÉ format ƒë·∫πp
        // Ch√∫ √Ω: N·∫øu object qu√° ph·ª©c t·∫°p ho·∫∑c c√≥ li√™n k·∫øt v√≤ng, stringify c√≥ th·ªÉ l·ªói, khi ƒë√≥ d√πng console.log(tenant)
        console.log(`[DEBUG] K·∫øt qu·∫£ Tenant.findOne:`, JSON.stringify(tenant, null, 2));
        // console.log("[DEBUG] Raw tenant object:", tenant); // Log object g·ªëc n·∫øu stringify l·ªói

        // --- B·∫Øt ƒë·∫ßu ki·ªÉm tra k·∫øt qu·∫£ ---
        if (!tenant) {
            // Log 4a: Kh√¥ng t√¨m th·∫•y b·∫£n ghi Tenant n√†o v·ªõi MaTK n√†y
            console.warn(`[DEBUG] *** KH√îNG T√åM TH·∫§Y Tenant v·ªõi MaTK: ${tenantUserId} trong database.`);
            // Tr·∫£ v·ªÅ 404 nh∆∞ng v·ªõi message r√µ h∆°n cho debug
            return res.status(404).json({ message: `Kh√¥ng t√¨m th·∫•y kh√°ch thu√™ v·ªõi MaTK ${tenantUserId}.` });
        }

        // Ki·ªÉm tra chu·ªói li√™n k·∫øt d·ªØ li·ªáu
        const landlordUser = tenant.Room?.RentalHouse?.Landlord?.Account;

        if (!landlordUser) {
            // Log 4b: T√¨m th·∫•y Tenant nh∆∞ng chu·ªói li√™n k·∫øt b·ªã ƒë·ª©t ho·∫∑c d·ªØ li·ªáu l·ªìng nhau b·ªã thi·∫øu
            console.warn(`[DEBUG] *** T√åM TH·∫§Y Tenant, nh∆∞ng KH√îNG t√¨m th·∫•y th√¥ng tin User ch·ªß tr·ªç l·ªìng nhau.`);
            console.warn(`[DEBUG] Ki·ªÉm tra chu·ªói d·ªØ li·ªáu tr·∫£ v·ªÅ:`);
            console.warn(`  - tenant.Room t·ªìn t·∫°i: ${!!tenant.Room}`);
            console.warn(`  - tenant.Room?.House t·ªìn t·∫°i: ${!!tenant.Room?.House}`);
            console.warn(`  - tenant.Room?.House?.Landlord t·ªìn t·∫°i: ${!!tenant.Room?.House?.Landlord}`);
            console.warn(`  - tenant.Room?.House?.Landlord?.User t·ªìn t·∫°i: ${!!tenant.Room?.House?.Landlord?.User}`);
            // Th√¥ng b√°o l·ªói cho client v·∫´n gi·ªØ nguy√™n nh∆∞ c≈©
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ch·ªß tr·ªç li√™n k·∫øt ƒë·∫ßy ƒë·ªß." });
        }
        // --- K·∫øt th√∫c ki·ªÉm tra k·∫øt qu·∫£ ---

        // Log 5: ƒê√£ tr√≠ch xu·∫•t th√†nh c√¥ng th√¥ng tin User ch·ªß tr·ªç
        console.log(`[DEBUG] Tr√≠ch xu·∫•t th√†nh c√¥ng th√¥ng tin User ch·ªß tr·ªç:`, JSON.stringify(landlordUser, null, 2));
        console.log(`‚úÖ T√¨m th·∫•y MaTK ch·ªß tr·ªç (${landlordUser.MaTK}) cho kh√°ch thu√™ ${tenantUserId}`);

        // Tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng
        res.status(200).json({
            MaTK: landlordUser.MaTK,
            TenDangNhap: landlordUser.TenDangNhap,
            HoTen: tenant.Room.RentalHouse.Landlord.HoTen
        });

    } catch (error) {
        // Log 6: B·∫Øt l·ªói trong qu√° tr√¨nh th·ª±c thi
        console.error(`[DEBUG] ‚ùå L·ªói nghi√™m tr·ªçng trong getLandlordAccountForTenant cho kh√°ch thu√™ ${tenantUserId}:`, error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß khi l·∫•y th√¥ng tin ch·ªß tr·ªç." });
    } finally {
         // Log 7: K·∫øt th√∫c x·ª≠ l√Ω request
        console.log(`[DEBUG] === K·∫øt th√∫c getLandlordAccountForTenant cho Kh√°ch Thu√™ MaTK: ${tenantUserId} ===\n`);
    }
};

// üü¢ L·∫•y danh s√°ch th√†nh vi√™n theo ph√≤ng
exports.getMembersByRoom = async (req, res) => {
    try {
        const tenants = await Tenant.findAll({
            where: { MaPhong: req.params.roomId, LaNguoiDaiDien: false, TrangThai: "ƒêang thu√™" }
        });
        res.json(tenants);
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y danh s√°ch th√†nh vi√™n:", error);
        res.status(500).json({ message: error.message });
    }
};

// üü¢ C·∫≠p nh·∫≠t th√¥ng tin kh√°ch
exports.updateTenant = async (req, res) => {
    const tenantId = req.params.id;
    try {
        const tenant = await Tenant.findByPk(tenantId);
        if (!tenant) {
            // N·∫øu c√≥ file m·ªõi upload nh∆∞ng kh√¥ng t√¨m th·∫•y kh√°ch, x√≥a file ƒë√≥ ƒëi
            if (req.file) {
                 fs.unlink(req.file.path, (err) => {
                     if (err) console.error("‚ùå L·ªói khi x√≥a file upload th·ª´a:", err);
                 });
            }
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng" });
        }

        // 1. L·∫•y d·ªØ li·ªáu t·ª´ req.body (ƒë√£ ƒë∆∞·ª£c multer x·ª≠ l√Ω)
        //    L∆∞u √Ω: t√™n key trong req.body ph·∫£i kh·ªõp v·ªõi t√™n c·ªôt trong Model
        const updateData = {
            HoTen: req.body.HoTen,
            CCCD: req.body.CCCD,
            SoDienThoai: req.body.SoDienThoai,
            Email: req.body.Email ? req.body.Email : null, // N·∫øu c√≥ tr∆∞·ªùng n√†y trong body
            NgaySinh: req.body.NgaySinh ? new Date(req.body.NgaySinh) : null, // Chuy·ªÉn ƒë·ªïi date string
            GioiTinh: req.body.GioiTinh,
            NgayThue: req.body.NgayThue ? new Date(req.body.NgayThue) : null, // Gi·∫£ s·ª≠ c√≥ c·ªôt NgayThue
            GhiChu: req.body.GhiChu,
            TrangThai: req.body.TrangThai,
            LaNguoiDaiDien: req.body.LaNguoiDaiDien === 'true', // Chuy·ªÉn ƒë·ªïi t·ª´ string sang boolean
            AnhGiayTo: req.body.AnhGiayTo // N·∫øu c√≥ tr∆∞·ªùng n√†y trong body
        };

        // 2. Ki·ªÉm tra n·∫øu c√≥ file ·∫£nh m·ªõi ƒë∆∞·ª£c upload
        let oldPhotoPath = tenant.AnhGiayTo ? path.join('uploads', tenant.AnhGiayTo) : null; // L∆∞u ƒë∆∞·ªùng d·∫´n ·∫£nh c≈©

        if (req.file) {
            console.log("üìÅ C√≥ file m·ªõi:", req.file.filename);
            updateData.AnhGiayTo = req.file.filename; // C·∫≠p nh·∫≠t t√™n file ·∫£nh m·ªõi v√†o data
        } else {
             // N·∫øu kh√¥ng c√≥ file m·ªõi, gi·ªØ nguy√™n ·∫£nh c≈© (kh√¥ng c·∫ßn l√†m g√¨ v·ªõi updateData.AnhGiayTo)
             console.log("üö´ Kh√¥ng c√≥ file m·ªõi.");
        }

        // Lo·∫°i b·ªè c√°c tr∆∞·ªùng undefined ho·∫∑c null kh·ªèi updateData ƒë·ªÉ tr√°nh ghi ƒë√® kh√¥ng mong mu·ªën
        Object.keys(updateData).forEach(key => (updateData[key] === undefined || updateData[key] === null) && delete updateData[key]);

        // 3. Th·ª±c hi·ªán c·∫≠p nh·∫≠t
        await tenant.update(updateData);

        // 4. (T√πy ch·ªçn) X√≥a ·∫£nh c≈© n·∫øu c√≥ ·∫£nh m·ªõi v√† ·∫£nh c≈© t·ªìn t·∫°i
        if (req.file && oldPhotoPath) {
            // Ki·ªÉm tra file c≈© c√≥ t·ªìn t·∫°i kh√¥ng tr∆∞·ªõc khi x√≥a
            fs.access(oldPhotoPath, fs.constants.F_OK, (err) => {
                if (!err) {
                    // File t·ªìn t·∫°i, ti·∫øn h√†nh x√≥a
                    fs.unlink(oldPhotoPath, (unlinkErr) => {
                        if (unlinkErr) {
                            console.error("‚ùå L·ªói khi x√≥a ·∫£nh c≈©:", oldPhotoPath, unlinkErr);
                        } else {
                            console.log("üóëÔ∏è ƒê√£ x√≥a ·∫£nh c≈©:", oldPhotoPath);
                        }
                    });
                } else {
                    console.log("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y file ·∫£nh c≈© ƒë·ªÉ x√≥a:", oldPhotoPath);
                }
            });
        }

        // L·∫•y l·∫°i th√¥ng tin tenant sau khi update ƒë·ªÉ tr·∫£ v·ªÅ (bao g·ªìm c·∫£ t√™n file ·∫£nh m·ªõi n·∫øu c√≥)
        const updatedTenant = await Tenant.findByPk(tenantId);

        res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", tenant: updatedTenant });

    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin kh√°ch:", error);
        // N·∫øu c√≥ l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω DB m√† ƒë√£ upload file, h√£y x√≥a file ƒë√≥ ƒëi
        if (req.file) {
             fs.unlink(req.file.path, (err) => {
                 if (err) console.error("‚ùå L·ªói khi x√≥a file upload do l·ªói DB:", err);
             });
        }
        // N·∫øu l·ªói l√† do validation c·ªßa Sequelize ho·∫∑c multer file filter
        if (error.name === 'SequelizeValidationError' || error.message.includes('Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh')) {
             res.status(400).json({ message: error.message });
        } else {
             res.status(500).json({ message: "L·ªói m√°y ch·ªß khi c·∫≠p nh·∫≠t th√¥ng tin kh√°ch." });
        }
    }
};

// üü¢ Th√™m kh√°ch m·ªõi
exports.addTenant = async (req, res) => {
    try {
        // Log c·∫£ body v√† file ƒë·ªÉ debug
        console.log("üìå D·ªØ li·ªáu body nh·∫≠n ƒë∆∞·ª£c:", req.body);
        console.log("üìÅ File nh·∫≠n ƒë∆∞·ª£c:", req.file); // Ki·ªÉm tra xem multer ƒë√£ x·ª≠ l√Ω file ch∆∞a

        // L·∫•y c√°c tr∆∞·ªùng text t·ª´ req.body
        const { MaPhong, HoTen, MaTK, CCCD, SoDienThoai, Email, NgaySinh, GioiTinh, GhiChu, LaNguoiDaiDien, TrangThai } = req.body;

        // --- Validation ƒë∆∞·ª£c c·∫£i thi·ªán ---
        // Ki·ªÉm tra c√°c tr∆∞·ªùng text b·∫Øt bu·ªôc t·ª´ body
        // (B·ªè AnhGiayTo ra kh·ªèi check n√†y)
        if (!HoTen || !CCCD || !SoDienThoai || !MaPhong || !NgaySinh || !GioiTinh ) {
            // Th√¥ng b√°o l·ªói ch√≠nh x√°c h∆°n cho c√°c tr∆∞·ªùng text
            return res.status(400).json({ message: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc: H·ªç t√™n, CCCD, S·ªë ƒëi·ªán tho·∫°i, M√£ ph√≤ng, Ng√†y sinh, Gi·ªõi t√≠nh." });
        }

        // Ki·ªÉm tra xem file c√≥ ƒë∆∞·ª£c upload b·ªüi multer kh√¥ng
        if (!req.file) {
             // Th√¥ng b√°o l·ªói c·ª• th·ªÉ khi thi·∫øu file
            return res.status(400).json({ message: "Vui l√≤ng t·∫£i l√™n ·∫£nh gi·∫•y t·ªù." });
        }

        // L·∫•y t√™n file t·ª´ k·∫øt qu·∫£ c·ªßa multer
        const anhGiayToFilename = req.file.filename;

        // --- T·∫°o b·∫£n ghi Tenant ---
        const tenant = await Tenant.create({
            MaPhong, // N√™n ƒë·∫£m b·∫£o MaPhong l√† ki·ªÉu d·ªØ li·ªáu ƒë√∫ng (s·ªë?)
            HoTen,
            MaTK: MaTK || null, // Cho ph√©p MaTK l√† t√πy ch·ªçn
            CCCD,
            SoDienThoai,
            Email: Email || null, // Cho ph√©p Email l√† t√πy ch·ªçn
            NgaySinh, // ƒê·∫£m b·∫£o ƒë·ªãnh d·∫°ng ng√†y g·ª≠i l√™n t∆∞∆°ng th√≠ch ho·∫∑c x·ª≠ l√Ω ·ªü ƒë√¢y
            GioiTinh,
            GhiChu: GhiChu || null, // Cho ph√©p GhiChu l√† t√πy ch·ªçn
            AnhGiayTo: anhGiayToFilename, // *** D√πng t√™n file t·ª´ req.file ***
            // Chuy·ªÉn ƒë·ªïi gi√° tr·ªã t·ª´ FormData (th∆∞·ªùng l√† string) n·∫øu c·∫ßn
            LaNguoiDaiDien: LaNguoiDaiDien === 'true' ? true : false,
            TrangThai: TrangThai || 'ƒêang thu√™' // D√πng tr·∫°ng th√°i g·ª≠i l√™n ho·∫∑c m·∫∑c ƒë·ªãnh
        });

        res.status(201).json(tenant); // Tr·∫£ v·ªÅ 201 Created v√† d·ªØ li·ªáu kh√°ch m·ªõi

    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫°o kh√°ch m·ªõi:", error);

        // --- X·ª≠ l√Ω d·ªçn d·∫πp file n·∫øu c√≥ l·ªói x·∫£y ra sau khi upload ---
        if (req.file) {
            fs.unlink(req.file.path, (err) => { // X√≥a file ƒë√£ upload n·∫øu c√≥ l·ªói DB
                if (err) console.error("‚ùå L·ªói khi x√≥a file upload do l·ªói DB:", err);
                else console.log("üóëÔ∏è ƒê√£ x√≥a file upload do l·ªói DB:", req.file.path);
            });
        }

        // --- X·ª≠ l√Ω c√°c lo·∫°i l·ªói c·ª• th·ªÉ ---
        // L·ªói validation t·ª´ Sequelize (v√≠ d·ª•: unique constraint)
         if (error.name === 'SequelizeValidationError' || error.name === 'SequelizeUniqueConstraintError') {
             const messages = error.errors.map(e => e.message); // L·∫•y th√¥ng b√°o l·ªói c·ª• th·ªÉ
             return res.status(400).json({ message: messages.join(', ') }); // Tr·∫£ v·ªÅ l·ªói 400 v·ªõi th√¥ng b√°o
         }

        // C√°c l·ªói m√°y ch·ªß kh√°c
        res.status(500).json({ message: "L·ªói m√°y ch·ªß khi t·∫°o kh√°ch m·ªõi." });
    }
};

// üü¢ "Xo√°" kh√°ch (Th·ª±c ch·∫•t l√† c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh 'ƒê√£ r·ªùi ƒëi')
exports.deleteTenant = async (req, res) => {
    try {
        const tenant = await Tenant.findByPk(req.params.id);
        if (!tenant) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng" });
        }

        // --- Thay ƒë·ªïi ·ªü ƒë√¢y ---
        // Thay v√¨ tenant.destroy(), c·∫≠p nh·∫≠t tr·∫°ng th√°i
        const currentDate = new Date(); // L·∫•y ng√†y gi·ªù hi·ªán t·∫°i
        await tenant.update({
            NgayRoiDi: currentDate,     // C·∫≠p nh·∫≠t ng√†y r·ªùi ƒëi
            TrangThai: 'ƒê√£ r·ªùi ƒëi'     // ƒê·ªìng th·ªùi c·∫≠p nh·∫≠t tr·∫°ng th√°i (t√πy ch·ªçn nh∆∞ng n√™n l√†m)
        });

        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i kh√°ch ID ${req.params.id} th√†nh 'ƒê√£ r·ªùi ƒëi'.`);
        // Tr·∫£ v·ªÅ th√¥ng b√°o th√†nh c√¥ng (ho·∫∑c c√≥ th·ªÉ tr·∫£ v·ªÅ ch√≠nh tenant ƒë√£ c·∫≠p nh·∫≠t n·∫øu mu·ªën)
        res.json({ message: "ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i kh√°ch th√†nh 'ƒê√£ r·ªùi ƒëi' th√†nh c√¥ng" });
        // --- K·∫øt th√∫c thay ƒë·ªïi ---

    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i kh√°ch h√†ng:", error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß khi c·∫≠p nh·∫≠t tr·∫°ng th√°i kh√°ch h√†ng." });
    }
};

// ‚≠ê‚≠ê‚≠ê H√ÄM M·ªöI: Thay ƒë·ªïi ng∆∞·ªùi ƒë·∫°i di·ªán ph√≤ng ‚≠ê‚≠ê‚≠ê
exports.changeRoomRepresentative = async (req, res) => {
    // L·∫•y roomId v√† ID ng∆∞·ªùi m·ªõi t·ª´ body nh∆∞ frontend g·ª≠i l√™n
    const { roomId, newRepresentativeId } = req.body; // ƒê·ªïi t√™n key cho kh·ªõp frontend
    let transaction;

    console.log(`[API Change Rep] Request received: Room ID=${roomId}, New Rep ID=${newRepresentativeId}`);

    try {
        // Validate input
        if (!roomId || !newRepresentativeId) {
            console.log("[API Change Rep] Validation failed: Missing roomId or newRepresentativeId");
            return res.status(400).json({ message: "Thi·∫øu th√¥ng tin Ph√≤ng ho·∫∑c Ng∆∞·ªùi ƒë·∫°i di·ªán m·ªõi." });
        }

        transaction = await sequelize.transaction();
        console.log("[API Change Rep] Transaction started.");

        // 1. T√¨m ng∆∞·ªùi ƒë·∫°i di·ªán m·ªõi ƒë∆∞·ª£c ch·ªçn (ph·∫£i ƒëang ·ªü trong ph√≤ng v√† ƒëang thu√™)
        console.log(`[API Change Rep] Finding new representative: ID=${newRepresentativeId}, Room=${roomId}`);
        const newRep = await Tenant.findOne({
            where: {
                MaKhachThue: newRepresentativeId,
                MaPhong: roomId,
                NgayRoiDi: null // Ph·∫£i ƒëang thu√™
            },
            transaction
        });

        if (!newRep) {
            console.log("[API Change Rep] New representative not found or already left.");
            await transaction.rollback();
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi thu√™ ƒë∆∞·ª£c ch·ªçn l√†m ƒë·∫°i di·ªán m·ªõi trong ph√≤ng n√†y ho·∫∑c h·ªç ƒë√£ r·ªùi ƒëi." });
        }
        console.log(`[API Change Rep] Found new representative: ${newRep.HoTen}`);

        if (newRep.LaNguoiDaiDien) {
             console.log("[API Change Rep] Selected tenant is already the representative.");
             await transaction.rollback();
             return res.status(400).json({ message: "Ng∆∞·ªùi n√†y hi·ªán ƒë√£ l√† ng∆∞·ªùi ƒë·∫°i di·ªán r·ªìi." });
        }


        // 2. T√¨m v√† b·ªè tr·∫°ng th√°i ƒë·∫°i di·ªán c·ªßa ng∆∞·ªùi c≈© (n·∫øu c√≥) trong c√πng ph√≤ng
         console.log(`[API Change Rep] Demoting old representative(s) in Room=${roomId}`);
        const [updateCount] = await Tenant.update(
            { LaNguoiDaiDien: false },
            {
                where: {
                    MaPhong: roomId,
                    LaNguoiDaiDien: true,
                    NgayRoiDi: null // Ch·ªâ t√¨m ng∆∞·ªùi ƒëang thu√™
                },
                transaction
            }
        );
        console.log(`[API Change Rep] Demoted ${updateCount} old representative(s).`);


        // 3. C·∫≠p nh·∫≠t ng∆∞·ªùi m·ªõi th√†nh ƒë·∫°i di·ªán
         console.log(`[API Change Rep] Promoting new representative: ID=${newRepresentativeId}`);
        await newRep.update({ LaNguoiDaiDien: true }, { transaction });
        console.log(`[API Change Rep] Successfully promoted ${newRep.HoTen}.`);


        // 4. Commit transaction
        await transaction.commit();
        console.log("[API Change Rep] Transaction committed successfully.");


        // *** Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi ƒë·∫°i di·ªán m·ªõi ƒë·ªÉ frontend c·∫≠p nh·∫≠t state ***
        res.json({
             message: `ƒê√£ ƒë·ªïi ng∆∞·ªùi ƒë·∫°i di·ªán ph√≤ng ${roomId} th√†nh c√¥ng.`,
             newRepresentative: newRep // G·ª≠i k√®m d·ªØ li·ªáu ng∆∞·ªùi ƒë·∫°i di·ªán m·ªõi
         });

    } catch (error) {
        console.error(`[API Change Rep] ‚ùå Error changing representative for room ${roomId}:`, error);
        if (transaction) {
             await transaction.rollback();
             console.log("[API Change Rep] Transaction rolled back due to error.");
        }
        res.status(500).json({ message: error.message || "L·ªói m√°y ch·ªß khi ƒë·ªïi ng∆∞·ªùi ƒë·∫°i di·ªán." });
    }
};

// üü¢ T√¨m ki·∫øm kh√°ch theo t√™n
exports.searchTenantByName = async (req, res) => {
    try {
        const tenants = await Tenant.findAll({
            where: {
                TenKH: {
                    [Op.like]: `%${req.query.name}%`
                }
            }
        });
        res.json(tenants);
    } catch (error) {
        console.error("‚ùå L·ªói khi t√¨m ki·∫øm kh√°ch h√†ng:", error);
        res.status(500).json({ message: error.message });
    }
}

exports.getMyRoom = async (req, res) => {
    try {
      const maTK = req.user.id; // L·∫•y t·ª´ token sau khi x√°c th·ª±c
  
      const tenant = await Tenant.findOne({
        where: { MaTK: maTK },
        include: [
          {
            model: Room, // Ph√≤ng ƒëang thu√™
            include: [RoomType, RentalHouse], // N·∫øu c·∫ßn
          },
        ],
      });
  
      if (!tenant) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi thu√™." });
  
      return res.status(200).json(tenant); // Tr·∫£ v·ªÅ th√¥ng tin ph√≤ng
    } catch (err) {
      console.error(err);
      return res.status(500).json({ error: "L·ªói m√°y ch·ªß" });
    }
  };

  exports.getMyProfile = async (req, res) => {
    try {
      const maTK = req.user.id;
  
      const tenant = await Tenant.findOne({
        where: { MaTK: maTK },
        include: [
          {
            model: Room,
            include: [RentalHouse]
          },
        ],
      });
  
      if (!tenant) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y kh√°ch thu√™." });
      }
  
      res.json(tenant);
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin kh√°ch thu√™:", error);
      res.status(500).json({ message: "L·ªói m√°y ch·ªß khi l·∫•y th√¥ng tin c√° nh√¢n." });
    }
  };