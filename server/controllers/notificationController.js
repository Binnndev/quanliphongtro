// controllers/notificationController.js

// --- Imports ---
// Import User model instead of Tenant for associations
const { Notification, TaiKhoan, Tenant, Landlord, Sequelize } = require("../models");
const { Op } = Sequelize;

// --- Controller Functions ---

// üü¢ T·∫°o th√¥ng b√°o m·ªõi
exports.createNotification = async (req, res) => {
    try {
        // MaNguoiGui and MaNguoiNhan should now be MaTK (Account IDs) from frontend
        const { MaNguoiGui, MaNguoiNhan, TieuDe, NoiDung } = req.body;

        // --- Validation ---
        if (!MaNguoiGui || !MaNguoiNhan || !TieuDe || !NoiDung) {
            return res.status(400).json({ message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc (Ng∆∞·ªùi g·ª≠i, Ng∆∞·ªùi nh·∫≠n, Ti√™u ƒë·ªÅ, N·ªôi dung)." });
        }

        // Check if sender/receiver User accounts exist using MaTK
        const senderExists = await TaiKhoan.findByPk(MaNguoiGui);
        const receiverExists = await TaiKhoan.findByPk(MaNguoiNhan);
        if (!senderExists || !receiverExists) {
            return res.status(400).json({ message: "T√†i kho·∫£n Ng∆∞·ªùi g·ª≠i ho·∫∑c Ng∆∞·ªùi nh·∫≠n kh√¥ng h·ª£p l·ªá." });
        }
        // --- End Validation ---

        const newNotificationData = {
            MaNguoiGui,     // Stores Sender's MaTK
            MaNguoiNhan,    // Stores Receiver's MaTK
            TieuDe,
            NoiDung,
            ThoiGian: new Date(),
            DaDoc: false
        };

        const notification = await Notification.create(newNotificationData);
        console.log("‚úÖ T·∫°o th√¥ng b√°o th√†nh c√¥ng, ID:", notification.MaThongBao);

        // TODO: Real-time notification logic (e.g., Socket.IO)
        // if (req.io) { // Check if io object is attached to req
        //     req.io.to(`user_${MaNguoiNhan}`).emit('new_notification', notification); // Emit to receiver's MaTK room
        // }

        // Fetch the notification again with sender info to return
        const createdNotification = await Notification.findByPk(notification.MaThongBao, {
            include: [{
                model: TaiKhoan,
                as: 'SenderAccount', // Use the correct alias
                attributes: ['MaTK'] // Include desired User attributes (adjust as needed)
            }]
        });

        res.status(201).json({ message: "T·∫°o th√¥ng b√°o th√†nh c√¥ng", notification: createdNotification });

    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫°o th√¥ng b√°o:", error);
         if (error.name === 'SequelizeValidationError') {
             return res.status(400).json({ message: error.errors.map(e => e.message).join(', ') });
         }
        res.status(500).json({ message: "L·ªói m√°y ch·ªß khi t·∫°o th√¥ng b√°o." });
    }
};

// üü¢ L·∫•y danh s√°ch th√¥ng b√°o cho ng∆∞·ªùi nh·∫≠n (User ID = MaTK) - C√ì T√åM KI·∫æM
exports.getNotificationsForUser = async (req, res) => {
    const userId = req.params.userId; // MaTK ng∆∞·ªùi nh·∫≠n
    const limit = parseInt(req.query.limit) || 10; // L·∫•y limit t·ª´ query, m·∫∑c ƒë·ªãnh 10
    const page = parseInt(req.query.page) || 1;
    const offset = (page - 1) * limit;
    const readStatus = req.query.read; // Filter ƒë√£ ƒë·ªçc/ch∆∞a ƒë·ªçc
    const searchTerm = req.query.search; // L·∫•y t·ª´ kh√≥a t√¨m ki·∫øm

    try {
        // --- X√¢y d·ª±ng ƒëi·ªÅu ki·ªán Where ƒë·ªông ---
        const whereCondition = { MaNguoiNhan: userId }; // Lu√¥n l·ªçc theo ng∆∞·ªùi nh·∫≠n

        // Th√™m filter tr·∫°ng th√°i ƒê√£ ƒë·ªçc/Ch∆∞a ƒë·ªçc
        if (readStatus === 'true') {
            whereCondition.DaDoc = true;
        } else if (readStatus === 'false') {
            whereCondition.DaDoc = false;
        }

        // Th√™m ƒëi·ªÅu ki·ªán t√¨m ki·∫øm n·∫øu c√≥ searchTerm
        if (searchTerm) {
            const searchPattern = `%${searchTerm}%`;
            const searchConditions = {
                [Op.or]: [
                    { TieuDe: { [Op.like]: searchPattern } },
                    { NoiDung: { [Op.like]: searchPattern } }
                    // C√≥ th·ªÉ th√™m t√¨m ki·∫øm theo t√™n ng∆∞·ªùi g·ª≠i n·∫øu c·∫ßn (join ph·ª©c t·∫°p h∆°n)
                ]
            };
             // K·∫øt h·ª£p ƒëi·ªÅu ki·ªán ng∆∞·ªùi nh·∫≠n V√Ä ƒëi·ªÅu ki·ªán t√¨m ki·∫øm
            whereCondition[Op.and] = [
                // Gi·ªØ l·∫°i c√°c ƒëi·ªÅu ki·ªán c≈© n·∫øu c√≥ (v√≠ d·ª• DaDoc)
                ...(Object.keys(whereCondition).map(key => ({ [key]: whereCondition[key] }))),
                 searchConditions // Th√™m ƒëi·ªÅu ki·ªán OR cho search
            ];
             // X√≥a c√°c key g·ªëc ƒë√£ ƒë∆∞·ª£c ƒë∆∞a v√†o Op.and ƒë·ªÉ tr√°nh tr√πng l·∫∑p
             if (readStatus !== undefined) delete whereCondition.DaDoc;
              console.log("Search condition for received:", whereCondition);

        } else {
            // N·∫øu kh√¥ng t√¨m ki·∫øm, ƒë·∫£m b·∫£o c·∫•u tr√∫c where v·∫´n ƒë√∫ng
             const existingConditions = { ...whereCondition }; // Copy ƒëi·ªÅu ki·ªán hi·ªán c√≥
             whereCondition[Op.and] = [existingConditions]; // ƒê·∫∑t v√†o Op.and
              if (readStatus !== undefined) delete whereCondition.DaDoc; // X√≥a key g·ªëc
              delete whereCondition.MaNguoiNhan; // X√≥a key g·ªëc
        }
       // --- K·∫øt th√∫c x√¢y d·ª±ng Where ---


        const { count, rows: notifications } = await Notification.findAndCountAll({
            where: whereCondition, // √Åp d·ª•ng ƒëi·ªÅu ki·ªán ƒë√£ x√¢y d·ª±ng
            limit: limit,
            offset: offset,
            order: [['ThoiGian', 'DESC']],
            include: [{ // Include ƒë·ªÉ l·∫•y t√™n ng∆∞·ªùi g·ª≠i (n·∫øu c·∫ßn)
                 model: TaiKhoan,
                 as: 'SenderAccount', // Alias c·ªßa ng∆∞·ªùi g·ª≠i
                 attributes: ['MaTK', 'TenDangNhap'],
                 required: false, // LEFT JOIN
                 include: [
                    {
                        model: Tenant,
                        attributes: ['HoTen'],
                        required: false // D√πng false ƒë·ªÉ kh√¥ng lo·∫°i b·ªè k·∫øt qu·∫£ n·∫øu kh√¥ng c√≥ th√¥ng tin Tenant
                    },
                    {
                        model: Landlord, // <<== TH√äM MODEL LANDLORD
                        attributes: ['HoTen'],
                        required: false // D√πng false ƒë·ªÉ kh√¥ng lo·∫°i b·ªè k·∫øt qu·∫£ n·∫øu kh√¥ng c√≥ th√¥ng tin Landlord
                    }
                ]
            }],
            distinct: true
        });

        const totalPages = Math.ceil(count / limit);

        // X·ª≠ l√Ω l·∫•y t√™n ng∆∞·ªùi g·ª≠i (T√ôY CH·ªåN - n·∫øu b·∫°n mu·ªën hi·ªÉn th·ªã t√™n ng∆∞·ªùi g·ª≠i)
         const formattedNotifications = notifications.map(noti => {
             const rawNoti = noti.get({ plain: true });
             let senderName = rawNoti.SenderAccount?.TenDangNhap || `MaTK ${rawNoti.MaNguoiGui}`;
            // Logic t∆∞∆°ng t·ª± nh∆∞ l·∫•y RecipientName ·ªü getSentNotifications n·∫øu b·∫°n include Tenant/Landlord
            if (rawNoti.SenderAccount?.Tenants?.[0].HoTen) {
                senderName = rawNoti.SenderAccount.Tenants[0].HoTen;
            } else if (rawNoti.SenderAccount?.Landlords?.[0].HoTen) { // <<== KI·ªÇM TRA TH√äM LANDLORD
                senderName = rawNoti.SenderAccount.Landlords[0].HoTen;
            }
             return { ...rawNoti, SenderName: senderName }; // Th√™m SenderName
         });

        console.log(`‚úÖ Fetched ${notifications.length}/${count} notifications for User ${userId} matching search "${searchTerm}". Page ${page}/${totalPages}.`);
        res.json({
            message: "L·∫•y danh s√°ch th√¥ng b√°o th√†nh c√¥ng",
            // data: rows, // Tr·∫£ v·ªÅ d·ªØ li·ªáu g·ªëc n·∫øu kh√¥ng c·∫ßn format t√™n ng∆∞·ªùi g·ª≠i
            data: formattedNotifications, // Tr·∫£ v·ªÅ d·ªØ li·ªáu ƒë√£ format
            pagination: { totalItems: count, totalPages, currentPage: page, limit }
        });

    } catch (error) {
        console.error(`‚ùå Error fetching notifications for User (MaTK) ${userId}:`, error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß khi l·∫•y danh s√°ch th√¥ng b√°o." });
    }
};

// Controller m·ªõi ƒë·ªÉ l·∫•y l·ªãch s·ª≠ ƒë√£ g·ª≠i
exports.getSentNotifications = async (req, res) => {
    const senderId = req.params.senderId;
    const limit = parseInt(req.query.limit) || 10; // S·ª≠ d·ª•ng limit t·ª´ query ho·∫∑c m·∫∑c ƒë·ªãnh
    const page = parseInt(req.query.page) || 1;
    const offset = (page - 1) * limit;
    const searchTerm = req.query.search; // L·∫•y t·ª´ kh√≥a t√¨m ki·∫øm

    if (!senderId) {
        return res.status(400).send({ message: "Thi·∫øu ID ng∆∞·ªùi g·ª≠i." });
    }

    try {
        // --- X√¢y d·ª±ng ƒëi·ªÅu ki·ªán Where ƒë·ªông ---
        const whereCondition = { MaNguoiGui: senderId };

        if (searchTerm) {
            const searchPattern = `%${searchTerm}%`; // Pattern cho LIKE
            // T√¨m ki·∫øm trong Ti√™u ƒë·ªÅ HO·∫∂C N·ªôi dung
            // L∆∞u √Ω: Op.iLike ch·ªâ ho·∫°t ƒë·ªông tr√™n PostgreSQL cho case-insensitive
            // D√πng Op.like v√† LOWER() cho t∆∞∆°ng th√≠ch r·ªông h∆°n
            whereCondition[Op.or] = [
                { TieuDe: { [Op.like]: searchPattern } },
                { NoiDung: { [Op.like]: searchPattern } }
                // T√¨m ki·∫øm t√™n ng∆∞·ªùi nh·∫≠n ph·ª©c t·∫°p h∆°n, t·∫°m b·ªè qua ·ªü b∆∞·ªõc n√†y
                // N·∫øu mu·ªën t√¨m c·∫£ t√™n ng∆∞·ªùi nh·∫≠n, c·∫ßn join ph·ª©c t·∫°p h∆°n ho·∫∑c d√πng full-text search
            ];
             console.log("Search condition:", whereCondition[Op.or]);
        }
        // ------------------------------------

        // S·ª≠ d·ª•ng findAndCountAll ƒë·ªÉ h·ªó tr·ª£ ph√¢n trang v√† t√¨m ki·∫øm
        const { count, rows: notifications } = await Notification.findAndCountAll({
            where: whereCondition, // √Åp d·ª•ng ƒëi·ªÅu ki·ªán t√¨m ki·∫øm
            include: [
                {
                    model: TaiKhoan,
                    as: 'ReceiverAccount',
                    attributes: ['MaTK', 'TenDangNhap'], // C√≥ th·ªÉ th√™m LoaiTaiKhoan n·∫øu c·∫ßn d√πng tr·ª±c ti·∫øp
                    include: [
                        {
                            model: Tenant,
                            attributes: ['HoTen'],
                            required: false // D√πng false ƒë·ªÉ kh√¥ng lo·∫°i b·ªè k·∫øt qu·∫£ n·∫øu kh√¥ng c√≥ th√¥ng tin Tenant
                        },
                        {
                            model: Landlord, // <<== TH√äM MODEL LANDLORD
                            attributes: ['HoTen'],
                            required: false // D√πng false ƒë·ªÉ kh√¥ng lo·∫°i b·ªè k·∫øt qu·∫£ n·∫øu kh√¥ng c√≥ th√¥ng tin Landlord
                        }
                    ]
                }
            ],
            order: [['ThoiGian', 'DESC']],
            limit: limit,
            offset: offset,
            distinct: true, // C·∫ßn thi·∫øt khi include v√† limit/offset ƒë·ªÉ count ch√≠nh x√°c
        });

        const totalPages = Math.ceil(count / limit);

        // X·ª≠ l√Ω ƒë·ªÉ l·∫•y t√™n ng∆∞·ªùi nh·∫≠n m·ªôt c√°ch nh·∫•t qu√°n (gi·ªØ nguy√™n)
        const formattedNotifications = notifications.map(noti => {
            const rawNoti = noti.get({ plain: true });
            let recipientName = rawNoti.ReceiverAccount?.TenDangNhap || `MaTK ${rawNoti.MaNguoiNhan}`; // Gi√° tr·ªã m·∫∑c ƒë·ªãnh
        
            // ∆Øu ti√™n l·∫•y HoTen t·ª´ TenantInfo ho·∫∑c LandlordInfo n·∫øu c√≥
            if (rawNoti.ReceiverAccount?.Tenants?.[0].HoTen) {
                recipientName = rawNoti.ReceiverAccount.Tenants[0].HoTen;
            } else if (rawNoti.ReceiverAccount?.Landlords?.[0].HoTen) { // <<== KI·ªÇM TRA TH√äM LANDLORD
                recipientName = rawNoti.ReceiverAccount.Landlords[0].HoTen;
            }
            // B·∫°n c√≥ th·ªÉ th√™m c√°c else if kh√°c n·∫øu c√≥ nhi·ªÅu lo·∫°i t√†i kho·∫£n v·ªõi t√™n ri√™ng
        
            return { ...rawNoti, RecipientName: recipientName }; // Gi·ªØ l·∫°i c√°c tr∆∞·ªùng kh√°c v√† th√™m RecipientName ƒë√£ format
        });

         console.log(`‚úÖ Found ${count} sent notifications for sender ${senderId} matching search "${searchTerm}". Returning page ${page}/${totalPages}.`);
        res.status(200).json({
             message: "L·∫•y l·ªãch s·ª≠ th√¥ng b√°o th√†nh c√¥ng",
             data: formattedNotifications,
             pagination: { totalItems: count, totalPages, currentPage: page, limit } // Tr·∫£ v·ªÅ th√¥ng tin ph√¢n trang
         });

    } catch (error) {
        console.error(`Error fetching sent notifications for sender MaTK ${senderId}:`, error);
        res.status(500).send({ message: "L·ªói l·∫•y l·ªãch s·ª≠ th√¥ng b√°o." });
    }
};


// üü¢ L·∫•y th√¥ng b√°o theo ID c·ªßa n√≥
exports.getNotificationById = async (req, res) => {
    const notificationId = req.params.id;
    try {
        const notification = await Notification.findByPk(notificationId, {
             include: [
                 { model: TaiKhoan, as: 'SenderAccount', attributes: ['MaTK'] }, // Use User model and correct alias
                 { model: TaiKhoan, as: 'ReceiverAccount', attributes: ['MaTK'] } // Use User model and correct alias
             ]
        });
        if (!notification) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y th√¥ng b√°o" });
        }
        // TODO: Add authorization check if needed
        console.log(`‚úÖ L·∫•y th√¥ng b√°o ID: ${notificationId}`);
        res.json(notification);
    } catch (error) {
        console.error(`‚ùå L·ªói khi l·∫•y th√¥ng b√°o ID ${notificationId}:`, error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß khi l·∫•y th√¥ng tin th√¥ng b√°o." });
    }
};

// üü¢ ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc cho 1 th√¥ng b√°o
exports.markAsRead = async (req, res) => {
    const notificationId = req.params.id;
    // Assume authentication middleware adds user info (including MaTK) to req.user
    // const requestingUserId = req.user?.MaTK;

    try {
        const notification = await Notification.findByPk(notificationId);
        if (!notification) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y th√¥ng b√°o" });
        }

        // Authorization check: Ensure the requester is the receiver
        // if (!requestingUserId || notification.MaNguoiNhan !== requestingUserId) {
        //     return res.status(403).json({ message: "Kh√¥ng c√≥ quy·ªÅn ƒë√°nh d·∫•u th√¥ng b√°o n√†y." });
        // }

        if (notification.DaDoc) {
            console.log(`‚ÑπÔ∏è Th√¥ng b√°o ID ${notificationId} ƒë√£ ƒë∆∞·ª£c ƒë·ªçc tr∆∞·ªõc ƒë√≥.`);
             return res.json({ message: "Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c ƒë·ªçc", notification });
        }

        await notification.update({ DaDoc: true });

        console.log(`‚úÖ ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc cho th√¥ng b√°o ID: ${notificationId}`);
        const updatedNotification = await Notification.findByPk(notificationId, {
             include: [{ model: TaiKhoan, as: 'SenderAccount', attributes: ['MaTK'] }] // Include sender info in response
        });
        res.json({ message: "ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc th√†nh c√¥ng", notification: updatedNotification });

    } catch (error) {
        console.error(`‚ùå L·ªói khi ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc cho th√¥ng b√°o ID ${notificationId}:`, error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß khi ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc." });
    }
};

// üü¢ ƒê√°nh d·∫•u t·∫•t c·∫£ l√† ƒë√£ ƒë·ªçc cho m·ªôt user (User ID = MaTK)
exports.markAllAsRead = async (req, res) => {
    const userId = req.params.userId; // This is MaTK
    // const requestingUserId = req.user?.MaTK;

    // Authorization check
    // if (!requestingUserId || String(userId) !== String(requestingUserId)) {
    //      return res.status(403).json({ message: "Kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y." });
    // }

    try {
        const [updateCount] = await Notification.update(
            { DaDoc: true },
            {
                where: {
                    MaNguoiNhan: userId, // Filter by Receiver's MaTK
                    DaDoc: false
                }
            }
        );

        console.log(`‚úÖ ƒê√£ ƒë√°nh d·∫•u ${updateCount} th√¥ng b√°o l√† ƒë√£ ƒë·ªçc cho User (MaTK): ${userId}`);
        res.json({ message: `ƒê√£ ƒë√°nh d·∫•u ${updateCount} th√¥ng b√°o l√† ƒë√£ ƒë·ªçc.` });

    } catch (error) {
        console.error(`‚ùå L·ªói khi ƒë√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc cho User (MaTK) ${userId}:`, error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß khi ƒë√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc." });
    }
};


// üü¢ X√≥a m·ªôt th√¥ng b√°o
exports.deleteNotification = async (req, res) => {
    const notificationId = req.params.id;
    // const requestingUserId = req.user?.MaTK;

    try {
        const notification = await Notification.findByPk(notificationId);
        if (!notification) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y th√¥ng b√°o" });
        }

        // Authorization check (e.g., only receiver or admin can delete)
        // if (!requestingUserId || (notification.MaNguoiNhan !== requestingUserId /* && !req.user.isAdmin */)) {
        //      return res.status(403).json({ message: "Kh√¥ng c√≥ quy·ªÅn x√≥a th√¥ng b√°o n√†y." });
        // }

        await notification.destroy(); // Hard delete

        console.log(`üóëÔ∏è ƒê√£ x√≥a th√¥ng b√°o ID: ${notificationId}`);
        res.json({ message: "X√≥a th√¥ng b√°o th√†nh c√¥ng" });

    } catch (error) {
        console.error(`‚ùå L·ªói khi x√≥a th√¥ng b√°o ID ${notificationId}:`, error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß khi x√≥a th√¥ng b√°o." });
    }
};